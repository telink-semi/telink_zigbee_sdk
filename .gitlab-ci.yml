stages:
  - scc
  - genLicense
  - checkLicense
  - build_tc32
  - build_riscv
  - build_iotStudio
  - cov
  - fossid
  - plainPW_check
  - oss
  - misspellChecking

scc:
  stage: scc
  script:
    - echo "Enter scc stage"
    - scc | tee scc.txt
    - bash /usr/bin/scc_calc.sh
    - echo  "The End SCC result:"
    - cat scc.txt
  artifacts:
    paths:
    - scc.txt

genLicense:
  variables:
    CODE_COMPILE_ARCH: 'EAGLE_ANDES'
    COV_PF_CATALOG: 'ZIGBEE'
  stage: genLicense
  before_script:
  script:
    - date
    - generat_license_list
    - date
  artifacts:
    paths:
    - "license_list_gen.txt"
    - "no_license_list_gen.txt"
    - "mismatch_license_file_gen.txt"
  when: manual

checkLicense:
  variables:
    CODE_COMPILE_ARCH: 'EAGLE_ANDES'
    COV_PF_CATALOG: 'ZIGBEE'
  stage: checkLicense
  allow_failure: yes
  before_script:
  script:
    - date
    - check_license
    #- generat_license_list # For no license files
    - date

  artifacts:
    when: always
    paths:
    - "mismatch_license.txt"
    - "no_license*.txt"
    - "unknow_type_file.txt"

build_tc32:
  variables:
    PROJECT_PATH: './tl_zigbee_sdk/build/tlsr_tc32'
    PROJECT_NAME: 'tl_zigbee_sdk'
  stage: build_tc32
  tags:
    - LINUX
    - TC32
  before_script:
  script:
    - which tc32-elf-gcc
    - chmod +x tl_zigbee_sdk/tools/*
    - date
    - ls tl_zigbee_sdk/build/tlsr_tc32
    - $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS1  -import $PROJECT_PATH -cleanBuild $PROJECT_NAME/sampleLight_8258
    - date

  artifacts:
    paths:
    - "$PROJECT_PATH/**/*.bin"
    - "$PROJECT_PATH/**/*.lst"
    - "$PROJECT_PATH/**/*.elf"

build_riscv:
  variables:    
    PROJECT_PATH: './tl_zigbee_sdk/build/tlsr_riscv'
    PROJECT_NAME: 'tl_zigbee_sdk'
  stage: build_riscv
  before_script:
  script:
    - ls
    - pwd
    - chmod +x tl_zigbee_sdk/tools/*
    - date
    - echo "--------------- Will build Demo -----------------"
    - echo $PROJECT_PATH
    - $ANDESRISCV_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import $PROJECT_PATH -cleanBuild $PROJECT_NAME/sampleLight_b91
    - date

  artifacts:
    paths:
    - "$PROJECT_PATH/**/output/*.bin"
    - "$PROJECT_PATH/**/output/objdump.txt"

build_iotStudio:
  variables:    
    PROJECT_PATH: './tl_zigbee_sdk/build/iot_riscv_tl321x'
    PROJECT_NAME: 'tl_zigbee_sdk'
  stage: build_iotStudio
  before_script:
  script:
    - ls
    - pwd
    - chmod +x tl_zigbee_sdk/tools/*
    - date
    - echo "--------------- Will build Demo -----------------"
    - echo $PROJECT_PATH
    - $TELINK_IDE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import $PROJECT_PATH -cleanBuild $PROJECT_NAME/sampleLight_tl321x
    - date

  artifacts:
    paths:
    - "$PROJECT_PATH/**/*.bin"
    - "$PROJECT_PATH/**/*.lst"
    - "$PROJECT_PATH/**/*.elf"

# The cov job definition
cov:
  variables:    
    CODE_COMPILE_ARCH: 'TC32'    
    COV_PF_CATALOG: 'ZIGBEE'  
  stage: cov 
  tags:    
    - COV    
    - LINUX    
    - TC32
  before_script:  
  script:    
    - chmod +x tl_zigbee_sdk/tools/*
    - $COV_B COV_$CI_PROJECT_NAME $COV_B_TEMPLATE/$CODE_COMPILE_ARCH $TC32_ECLIPSE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import tl_zigbee_sdk/build/tlsr_tc32  -cleanBuild tl_zigbee_sdk/sampleLight_8258    
    - $COV_A COV_$CI_PROJECT_NAME    
    - cov_add_commit_steam_project_2_platform.sh
  when: manual
        
fossid:
  tags:
    - FOSSID
  stage: fossid
  script:
    - fossid_check.sh
  artifacts:
    paths:
    - fossid*.txt
  when: manual

plainPW_check:
  stage: plainPW_check 
  script:
    - echo "Enter Plain Password checking stage"
    - check_plain_weak_password | tee result.txt
    - ls -l result.txt
    - echo "Error List:"
    - cat result.txt
  artifacts:
    paths:
    - result.txt
  when: manual

oss:
  tags:
    - OSS
  stage: oss
  script:
    - oss_checking .
  artifacts:
    paths:
    - scan_result
  when: manual

misspellChecking:
  stage: misspellChecking
  variables:
    pattern: "./tl_zigbee_sdk/platform/chip_tl321x/lib/include/pke/pke.h
              ./tl_zigbee_sdk/platform/chip_tl321x/lib/include/pke/pke.h
              ./tl_zigbee_sdk/platform/chip_tl321x/lib/include/pke/pke.h
              ./tl_zigbee_sdk/platform/chip_tl321x/lib/include/pke/pke.h
              ./tl_zigbee_sdk/platform/chip_b91/reg_include/core_reg
              ./tl_zigbee_sdk/platform/chip_b92/reg_include/core_reg.h
              ./tl_zigbee_sdk/platform/chip_tl321x/reg_include/core_reg.h
              ./tl_zigbee_sdk/platform/chip_tl721x/reg_include/core_reg.h
              ./tl_zigbee_sdk/apps/sampleLight/sampleLightCtrl.c
              ./tl_zigbee_sdk/apps/sampleLight/sampleLightEpCfg.c
              ./tl_zigbee_sdk/apps/sampleLight/sampleLight.h
              ./tl_zigbee_sdk/apps/sampleLight/zcl_sceneCb.c
              ./tl_zigbee_sdk/apps/sampleLight/zcl_colorCtrlCb.c"
    word_filter_pattern: "monts SIE currentY"
  tags:
    - LINUX
  script:
    - echo "--------------- Begin ------------------------"
    - misspell-check
    - echo "---------------- End -----------------------"
  artifacts:
    paths:
    - misspell_result.txt
    
